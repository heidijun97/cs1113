--emac-- total functions
-- block comments
-- symbolic arguments
-- pattern matching: any argument

module bool
import pair

data bool = true | false

id: bool -> bool
id b = b

constFalse: bool -> bool
constFalse _ = false

constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true

{--Part #1 hw--}
--#1
andp:pair bool bool -> bool   
andp (mkPair true true)=true
andp _= false
--#2
orp:pair bool bool -> bool   
orp (mkPair false false)= false
orp _=true
--#3
nandp: pair bool bool -> bool
nandp p = not (andp p)
--#4
xorp: pair bool bool -> bool    -- short for "exclusive or", given a pair of bool values, (a, b), return true if exactly one of a or b is true, and false otherwise
xorp (mkPair true false)= true
xorp (mkPair false true)=true
xorp _=false

--"Exam Problem #2: There are _4_ possible ways to fill in the result column for a truth table for a binary Boolean function, and there are thus exactly _4_ such functions, and no more
 
pand: bool->bool->bool
pand true= bool.id
pand false=bool.constFalse

por: bool->bool->bool
por true=bool.constTrue
por false=bool.id

pxor:bool->bool->bool
pxor true= bool.not
pxor false= bool.id

pnand: bool->bool->bool
pnand true=bool.not
pnand false=bool.constTrue

--binary functions (bool->bool->bool), implicit

and: bool->bool->bool
and true true=true
and _ _=false

uf:bool->bool
uf=(bool.and true)

or:bool->bool->bool
or false false=false
or _ _=true
